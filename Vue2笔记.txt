1. vue初步
	(1) 实例化(也可以不创建变量保存, 直接 new)
	    const vm = new Nue({
	        el: '#id',	// el 用于指定容器, 通常写法为 css 选择器
	        data: { name:'xxx', ... }	// 暂时以对象形式
	    })
	    
	    // html使用
	    <div id="id"> 我是{{name}} </div>	// 注意是在所选容器中使用

2. 注
	(1) 实例与容器只存在一对一的关系
	(2) 实际开发只有一个 Vue 实例, 并且配合组件使用
	(3) {{xxx}}, xxx以js表达式进行书写, 因此可以用上一些 js 方法

3. 模板语法
	(1) 插值 (标签内)
	    {{xxx}}
	(2) 指令 ( 特别是在 href, src 这种 在标签内进行 属性/属性值 操作的情况下使用的)
	    v-bind:href='xxx'
	    v-bind:  可简写为 : 
	(3) 插值语法中: 
	    1) data内, 值为普通键值对: {{xxx}}
	    2) data内, 值为对象属性: {{obj.xxx}}

4. 数据绑定(3 中的 v-bind 仅为数据单项绑定(vue对象的值给到))
	(1) v-bind: 数据单向绑定
	(2) v-model: 数据双向绑定
	(3) 注: v-model 仅在 表单类元素的输入类(或者说有 value属性 的)中可用
	(4) 简写形式
	    v-bind : 直接是 :
	    v-model : 因为只有 value 属性可用, 所以直接这样写
	              v-model:value='xxx' => v-model='xxx'

5. el 和 data 的另一种绑定方式
	(1) el: v.$mount('.xxx');	// 挂载
	(2) data:
	    data() { return { ... } }	// 直接 return 对象
	    // 简写的函数形式, 完整形式: data:function() { ... }
	    注: 必须要用 return 返回 一个对象

6. 数据绑定原理
	let num = xxx;
	Object.defineProperty(obj, obj_key, {
	    value: obj_value .........
	    
	    // 重点:
	    
	    // 单向绑定: 我们传入的对象作为一个函数的传参, 然后将对象里面的值作为获取 进行get后 的值(只进行读取操作), 返回到数值绑定的体现上(就像: vue的值变动, dom跟随变化; dom 改变, vue 不变)
	    get() {
	        log()
	        return num;
	    },
	    
	    // 双向绑定: 我们传入的对象作为一个函数的传参, 然后将对象里面的值作为 进行set后 的值(进行赋值操作), 返回到数值绑定的体现上(就像: vue的值变动, dom跟随变化; dom 改变, vue 也随之改变)(将准备改变的值反映给原先的值, 使之同时改变)
	    set(value) {
	        log()
	        num = value;
	    }
	})

7. methods(事件处理(就是点击事件这类东西))(主要用于事件处理)
	(1) 基本语法
	    js: vue { methods: click() { log } }
	    html: <div v-on:click='click'>	// 可以理解为事件绑定(?)
	(2) 简写: @click='click'
	(3) 传参形式: @click='click(xxx)'
	(4) 分类
	    @click
	    @keyup

8. 事件修饰符
	(1) 修饰符可进行链式调用(若有组合键时, 可考虑 keyup.k (事件.键))
	
	以下是常用修饰符
	=====================================
	// 行为修饰符
	(1) .prevent
	    这个就是 e.preventDefault() 的修饰符(简写
	(2) .stop
	    这个就是 e.stopPropagation() 的修饰符
	(3) .once
	    这个就是 $(document).once() 的修饰符
	
	// 按键修饰符
	// 不用特别去记, 因为本身就是按键名(指英文)(除了换行, 为什么是 tab?)
	// 
	(1) 回车 => .enter
	(2) 删除 => .delete	// 所以函数名不能写 delete 是这个原因
	(3) 退出 => .esc
	(4) 空格 => .space
	(5) 换行 => .tab	// 比较特殊, 必须和 keydown 一起使用, 然后这个所谓的换行可能意思只是切换到其他的元素上的这种(excel)
	(6) 上下左右就 => up, down, left, right
	
	// 系统修饰键(ctrl, shift, alt, meta)
	(1) keyup: 这些键需要在按下的时候, 配合其他键才有效果
	(2) keydown: 正常触发事件
	=====================================

9. 这边提个醒, 如果是利用 vue 的 data 作为 函数(methods) 的调用值, 那么记住是使用 this.key 来进行数据的调用的

10. computed(计算属性)(主要用于解决插值中需要计算出最终值的)
	(1) 基本语法
	    // vue
	    computed: { fullName: { get() { return this.xxx + this.xxx } } }
	    // html
	    直接使用插值语法(插 computed 计算中的 类名)
	(2) get() 什么时候调用?
	    1) 初次读取 所属类 时(就是指多个同名插值语法中, 只有第一个是调用 get() 的, 其他是使用这个缓存)
	    2) 参与计算的数值(依赖数据)发生改变时, , 会重新调用
	(3) set(value) 什么时候调用?
	    1) 数据被修改时
	    !!!注!!!: 这里需要注意几件事
	    computed 仅仅只是一个被计算的值(可以理解为本身并不实际存在), 如果要真正意义上地修改, 就必须将将 数据源 也进行修改
	(4) 简写
	    computed: { fullName() { ... } }
	(5) 注: 
	    1) computed里 属性中的函数 不是属性里的方法, 直接写属性名字即可, 是自动调用的
	    2) computed里 属性写成函数形式, 在插值语法中, 不用加上(), 它只是在写法上与函数相同, 但相对而言本身并不是

11. watch(监视属性)
	(1) 语法
	    watch: { isHot: { handler() { ... } } };
	    // 监听   要监听的值   要用于监听的方法
	(2) 常用属性
	    1) 处理函数(当值发生改变时调用)
	       handler(newValue, oldValue) { ... }
	    2) 立即执行函数(主要是初始化使用)
	       immediate: true;	 // 用于立即出发这个监听
	(3) 灵活形式
	    // 确保实例创建完
	    vm.$watch('变量(加引号才是键值获取的形式)', {
	        .....这里就是在vm怎么写, 这里也怎么写
	    })
	(4) 深度监视
	    1) 如果是监视 对象名中的键, 那么还是以 对象.键 的形式, 只是需要加上引号
	    2) 深度监视语法
	       在 watch 里加上 deep: true;
	       eg: data: { data1: { a:1, b:2 } }
	           监视名: add, data1:{ deep: true }
	           结果: 当 add 中的任意值变化时, 都可以监测到了
	(5) 简写形式(当只存在 handler 的时候)
	    // vue 形式
	    add(new_v, old_v) { ....... }
	    // vm 形式
	    vm.$watch('add', function(n_v, o_v) { // handler干啥就写啥 })
	
12. computed 和 watch (可不可异步)
	(1) computed 能够将重复类型的语句简单化, 在相对的简单程度上, computed 更胜一筹
	(2) 但需要注意的是, computed 无法进行异步任务, 但 watch 可以, 比如:
	    // computed要返回值: setTimeout(() => { return this.a })
	    // watch都是自己进行修改操作: setTimeout(() => { this.a = 999 })
	    所以只有 watch 才能拿到值, 因为表达式就是数据的直接操作; computed 是调用直接拿到返回值, 不会进行异步操作的等待
	(3) 必须注意的是, 只能使用箭头函数进行异步任务

13. 样式绑定
	(1) 绑定 class 样式(字符串写法, 用于只有 类名不确定时)
	    用 :class='css名字' (提个醒, v-bind:class='....')
	(2) 绑定 class 样式(数组写法, 用于 类名和个数 不确定的时)
	    data: { classArr:['a', 'b', 'c'`] }
	(3) 绑定 class 样式(对象写法, 用于 类名和个数 确定, 但需要动态指定时)
	    data: { class1: false, class2: false }
	
14. 条件渲染
	(1) v-show: 当值为 false 时, 效果为 display: none; 反之....
	    html: <div v-show='1 === 1 | false '>123</div>
	(2) v-if: 当值为 false 时, 直接干掉这个元素节点
	    html: <div v-if='1 === 1 | false '>123</div>
	(3) v-else-if: 同 if
	    html: <div v-if='1 === 1 | false '>123</div>
	(4) v-else: 同if
	    html: <div v-else>123</div>
	(5) 小技巧
	    1) 如果是 多个单组元素 判断, 那么使用 v-if;
	    2) 如果是 多组元素 判断, 那么就选择 v-if + v-else-if + v-else 的组合
	    3) 结构的顺序是不允许被打乱的, 并且不能在这个结构中插入其他 dom 节点
	(6) template + v-if 的使用(只能配合 v-if, 这个用法不会绝对性地破坏结构)
	    <template v-if='true'>
	        <h1>123</h1>
	    </template>
	(7) 以效率上看, v-show 因为是 display 完成的, 所以在进行 切换频率高的元素时 更高效; v-if 因为是对 dom 的操作, 所以更适用于 切换频率低 的操作 

15. 列表渲染
	(1) v-for( html 主要看第 4 点)
	    js: data: { person: [{1:1}, {2:2}, {3:3}] }
	    html: <p v-for="p in person"></p>
	(2) html 中, 遍历取多值
	    html: <p v-for="(p,index) in person"></p>
	(3) !注: in 主要遍历数组, of 主要遍历对象
	(4) 数据唯一标识( :key , 其中 p.id 为人为设置性标识, index 为首次页面渲染时生成的固定的数组下标索引)
	    1) p.id: <p v-for="(p,index) in person" :key='p.id'></p>
	    2) index: <p v-for='(p, index) in person' :key='index'></p>
	(5) 第 (4) 点的总结(主要使用 p.id )
	    1) p.id: 在会进行操作(生成或...)的节点内, 有与前面相同的标签(比如: input, 然后里面没有是本身就含有唯一标识属性的(比如 id))
	       用户在操作的永远是(在一定意义上)真实 DOM, 但数据的对比是在虚拟 DOM 中进行的, 所以不匹配的东西会替换掉, 但是匹配 的东西会保留	// 所以在这种情况下, index 的比对就容易出现问题, 因为匹配的东西它不会替换.

16. 列表过滤
	(1) watch
	    1) 创建一个专门存放 过滤后数据 的数组(放data)
	    2) indexOf(''), 当是空串时, 默认返回数组所有内容
	    3) 因为 2 ,所以只要加上 immediate: true, 初始就能自动生成
	    4) handler(val) {  // 小提醒, 监视函数(?对象)的名字就是数据的名字, 也就是说监视这个数据(val来源本身)
	       this.filPerson = this.person.filter(el => {
	               return el.name.indexOf(val) !== -1
	           })
	       }
	(2) computed
	    1) 只需要 数据 和 查询值
	    2) computed: {
	           filPerson() { // 含返回值仍需要 return 最外部的, 然后 这个名字用在 v-for 的 数组位置
	               return this.person.filter(el => {
	                   return el.name.indexOf(this.keyWord) !== -1
	               })
	           }
	       }
	     
17. 小技巧
	(1) 模糊查询
	    arr.filter( 新的数组(v) => { return v.xxx.indexOf(用户输入的内容) !== -1 } );
	    .filter(): 过滤, 并且独立生成一个新的数组(需要return)
	    .indexOf(): 括号内放需要过滤的东西(可以放 filter 的 element)
	(2) 多行注释 在 下面有代码时可折叠的方法
	    // #region (上面)
	    // #endregion (底部)
	(3) 数组大小排序
	    arr.sort((a, b) => { return a - b })
	    a - b: 升序
	    b - a: 降序
	(4) splice()
	    arr.splice('第几项开始', '要操作几个项'[, '在操作的项后面添加什么元素'] )

19. 列表排序
	(1) 看 上一个的(3)
	(2) html: @click='sortType = 0/1/2'  // 数字为判断升序或降序
	(3) 注意调用自身属性时的 this !!!!!!

20. 观察者 与 数据代理
	eg: this.$set(数据(或者说data), '数据名', 数据值)
	(1) vue: methods{ add() { Vue.set(同下) } } // 当不存在这个属性时, html 也不展示: v-if="student.name"
	    控制台: vm(this).$set(target, key, value)
	    // target: 目标对象
	(2) !注: set 的 target 不能是 _data 和 vm (因为都是代理生成的). target 必须是 _data 下的 一个对象
	(3) 数组的方式也一样, 只是 键值 是 索引值(index)
	(4) 观察者模式
	(5) vm 的数据观察(watch) 是进行了一个数据代理的模式. 
	    首先, 有一个数据观察(get(), set())
	    其次, 将这个数据观察进行代理, 并且在调用这个数据观察时, 调用的对象是代理者本身, 所以在监测时才会只调用一次, 不是像直接写数据代理一样无限返回观察自身(即观察之后又被调用到观察), 导致溢栈.
	    最后, 代理的属性是有一个完整的流程的, 所以如果是直接修改 vm 属性, 而不经过数据代理, 就无法对这个后来的数据进行监测.
	    所以 vue 在进行数据改变的同时, 能进行监测或改变.
	(6) 数组
	    需要注意的是, 数组的索引是没有 观察者 的, 只有数组内的值有, 所以一般要这样写: this.student.friends[0].name = '1'(换句话说, 整体上是要以 对象.键 的形式)
	(7) 数组常用会直接重新进行解析的方法
	    1) push(), pop()
	    2) shift() // 删除, unshift() // 在开头加上
	    3) splice()
	    4) sort()
	    5) reverse()

21. 收集表单数据
	(1) 注意 radio, checkbox, option 框 , 记得设置 value 值(v-model的)
	(2) checkbox 除了要设置 value, 还要记得在 数据双向绑定时, 将这个用于保存的 data变量, 设置为数组
	(3) select 选项, 是将 v-model 设置在 select 上, 而不是 option
	(4) 表单值的传递(主要就是_data, 但一般不去直接访问根目录)
	    info: { name, psd ........ }
	    const info = JSON.stringify(this.info);
	(5) v-model 修饰符
	    1) .number: 让输入框的值为数字(主要用于普通输入框)
	    2) .lazy: (?懒加载) 当 多行文本框 失去焦点时, 才进行数据的model
	    3) .trim: 去除前后空格

22. 时间格式化框架
	(1) 完整: moment.js
	(2) 轻量: dayjs.js

23. 过滤器(暂无, 后补)

24. v-text 与 {{xxx}}
	(1) v-text=''
	(2) {{xxx}}这种比较灵活(就是更好用)

25. 另一些指令
	(1) v-html 和 v-text (就是 jq 中的 html 和 text 的区别)
	(2) 注!!!!!!: 只有在可信内容上使用 v-html, 永远不要用在用户提交的内容上. 并且这个用于渲染比较危险, 容易导致 xxs 攻击
	(3) v-cloak : 这个是用于防止网速过慢时, 渲染很奇怪的情况
	    不用给值(就是直接用 v-cloak), 可以放在 vue 挂载的标签上, 要配合 css 使用:
	    [v-cloak] { display: none !important }
	    因为当vue渲染时, 这个标签就会自动移除, 所以不用管
	(4) v-once : 也是不用给值的, 只做第一次动态渲染
	(5) v-pre : 有这个属性的标签不进行解析

26. 自定义指令
	(1) Vue
	    directives: { xxx(elem, bind) {  } }
	    elem: 真实 DOM 元素
	    bind: 该 DOM 元素的一些值
	(2) Html
	    v-big = '绑定的值(data的)'
	(3) 这个函数何时被调用
	    1) 指令与元素成功绑定时
	    2) 指令所在的模板被重新解析时
	(4) 对象形式的完整写法 + 常用的三函数
	    fbind: {  }
	    1) bind() {}
	       : 在指令与元素成功绑定时( (3) 的 1) )
	    2) inserted() {}
	       : 在元素被插入到页面时
	    3) update() {}
	       : 指令所在模板被重新解析时( (3) 的 2) )
	(5) 因为 (4) 的 1) 3) 可知, 简写时只是不做 2), 所以只是在特殊情况下(比如需要在 元素被插入到页面时(比如获取焦点) 的一些功能)
	(6) 指令的 this 都是 window
	(7) 全局的定义方法(指所有, 这里举例directives, 但定全局时不加 -s)
	    // 对象完整形式
	    Vue.directive('fbind', { 
	      bind(){} , inserted()  {} , update(){} 
	    })
	    // 函数形式
	    Vue.directive('fbind', function() { 
	      bind(){} , inserted()  {} , update(){} 
	    })

27. 生命周期(mounted: Vue 完成模板解析并把真实的DOM元素放入到页面后(挂载完毕)调用mounted) !!!详解!!! P49 ~ P52, 后补
	(1) 小技巧
	    :style 时, style 里面 以对象形式写
	    完整写法(这里指同名): {opacity: opacity}
	    简写: {opacity}
	(2) mounted(弄定时器这类较为特殊的函数(指在真实DOM上动手脚的东西)) 
	    mounted() { setInterval(() => { this.opacity -= 0.01 }, 16), }

============================================

-----------组件化编程

1. 组件化
	(1) 创建组件
	    const student = Vue.extend({
	    // 组件定义是不写 el 的
	    // el: xxx,
	    
	    // 必须只能用函数式, 要不然会报错, 并且因为对象来讲, 它是存储在内存中, 那如果有两个外部的同时使用那么就变成两边都会发生各自的更改
	    // return的值以对象形式返回
	    data() { return { abc:123 } }
	})
	(2) 注册组件
	    new Vue({
	      el:'xxx',
	      // 注册
	      components: {
	         // 可以直接写 extend 的名字进行调用
	         student
	      }
	    })
	(3) 使用
	    // 前置步骤: 将 html 放入到 extend 中的 template 配置项中
	    const student = Vue.extend({
	      template: `
	        <h2>{{schoolName}}</h2>
	      `,
	      data() { return {} }
	    })
	    
	    // 最后一步: 将 extend 的名字(配置项的名字), 作为标签写在 html 上
	    <student></student>
	(4) 这种组件出来的标签速打的方法
	    xxx + > + enter
	(5) 全局注册组件(了解)
	    Vue.component('组件名(extend那个)', hello)
	(6) 可以在 配置 时, 加上一个 name 项, 然后 这个不能干预 component 的取名(也就是标签还是以 component 为准), 但是可以干预 vue开发者工具 中的名字, 便于识别 

2. 组件嵌套(比如一个大容器里, 要包裹几个小的容器, 这时候他们是父子关系)
	(1) 在 配置组件(extend) 中, 再进行一次 components 注册, 使用的话是要把 标签 写在 这个配置项的 template 中
	    const student;  const school
	    template: { <h2>{{}}</h2> <school> }
	    component: { school }
	    // 在需要被注册的组件里注册这个
	    
	(2) 注册全局的 app 组件
	    // 总领小组件
	    const app = Vue.extend{ components: { hello, school } } // 这里要写模板
	    // 所以在 vue 实例中, 只需要挂载 app 一个就行了
	    // 并且可以直接写 template:`<app></app>`

3. 单文件组件
	(1) 可识别标签(主要标签)
	    <template></template>  // 
	    <script></script>
	    <style></style>
	(2) 快速 .vue 的模板 : < + v
	(3) 单独写一个 App.vue 的组件, 注册全局组件
	    // script 下
	(4) 导入 vue 组件
	    一般这样: 
	    import xxx from './xxx';
	    
	    vue下:
	    <template> xxxx </template>
	    
	    script: 
	    <script> 
	        import School from './xxxxx' 
	    </script>

4. 脚手架
	(1) 这边不是跟老师的, 用的是 vite
	    // 按照步骤直接走, 暂时只要
	    npm init vite
	    	    
	    然后自己翻译, 有些环节直接 no 就行
	    
	    // 之后出现 "Done. Now run: xxxxx" 时
	    // 按照 所给的语句 可以直接执行(不过尽量每次都注意一下)
	    按照步骤执行完之后, 会变成vue直接开了 类似 Live Server 的东西
	    记录一下: 
	      cd 项目名
	      npm install
	      npm run dev

	    
	(2) 记录一下 .vue 长什么样
	    <template> 这里就是 html </template>
	    <script>
	        // 有些要 导入( import )
	        export default {
	            name:"模板名",
	            data() { return {} },
	            method.........
	        } 
	    </script>
	    <style> .... </style>
	
	(3) 记录一下 main 
	    import Vue from 'vue';
	    import App from './App.vue';
	    
	    new Vue({
	        el: "#app",
	        render: h => h(App)
	    })
	(4) 在 vite 内的 main.js
	    import { createApp } from 'vue' // 这行类似于导入了 global 包
	    
	    import App from './xxx'
	    
	    createApp(App).mount('#app')  // 这个就是指

5. ref
	(1) Vue 提供的一个获取 DOM 的 api. 更多是为了解决 模板 与 解析后生成的 DOM 间 的操作问题
	(2) 在 组件 上 写 ref, 在组件间通信 中 需要组件的实例对象

6. props
	(1) 记录一下 情况
	    stu.vue
	    app.vue
	(2) 使用
	    在非 app 下 写 props(在暴露出去的数据里面写)
	    在 app 下的 vue标签写 非app的数据(eg: <student name="xxx" age="xxx">)
	    
	    // 注: 若该数据为 数字 或 表达式, 那么考虑 使用 :age="18" 这种
	    
	    这两个对应上就能用了(?灵活复用)
	    1) 简单声明接收 (一般这个)
	       props:["name","age"]; 

	    2) 接收的同时对数据进行类型限制
	       props: {
	           name: String,
	           age: Number
	       }
	    
	    3) 接收数据的同时对数据进行类型限制: 默认值的指定 + 必要性的限制(比如和钱有关的)
	       props: {
	           name: {
	               type:String,
	               required: true  // 是否必填
	           },
	           age: {
	               type: Number
	               default: 99  // 默认
	           }
	       }
	(4) 若遇到数字相关, 模板上的值 可以考虑使用 : (注: v-bind)
	(5) 如果出现业务需求, 一定得要修改 props 内的对象, 那么利用 data 内的值来做
	    1) 创建一个data数据, 重新取一个名, 确保不与 props 的名一致
	    2) 让 data 的值  =  this[props中的名字]
	    3) 修改时, 修改的是 data 中的值, 这样就不会引起莫名错误了


7. 发现: 
	(1) 在 vite 中, script 标签上 加上 setup, 即可默认进行组件的暴露, 也就是说, 仅需引入组件即可.
	
	(2) 无 setup 情况下, 需要进行 暴露
	    export default {
	        name: 'App',
	        components: {引入的组件}
	    }

8. mixin
	(1) 抽象出来, 就是面向对象编程, 将复用率高的 代码 剥离出来, 单独形成 一个模块.
	(2) 怎么用
	    1) 首先, 创建一个 js 文件, 来储存 剥离的代码
	       export const mixin = {
	           // Vue 中怎么写, 这里也差不多
	           
	           methods: {
	               show() {
	                   log(this.name)
	               }
	           }
	       }
	       
	    2) 分别引入到需要使用到该模块的组件
	       import {xxx} from 'xxx';
	       
	       export default { mixins: [xxx] }
	       
	(3) 若 mixin 与 data 中的数据相冲突, 最终 以 vc 为准
	    但需要注意的是, 钩子函数不会被其他代替, 均会执行
	(4) (2) 的全局进行挂载, 就无需每个组件单独写一份, 但暂时不建议使用, 除非是在写插件(所以暂时不去记录)
	
9. plugins
	(1) 写法和 mixin 一致
	(2) 使用: 在 App 组件下 
	    Vue.use(plugins)  

10. scoped 属性
	(1) 让样式 仅在 局部生效(即scoped) (说人话就是只在这个组件上生效)
	(2) <style scoped>

11. 最简单的数据 子传父
	(1) 利用 props 进行函数传递, 修改内容的方法 写在 App上, 然后 在子组件标签上 使用 props 的写法(<abc :transfer="func" />).
	当然, data 数据也是写在 App 上

12. 全局事件总线(傀儡) (Vue2) -- 都是写在 main.js
	(1) 利用 Vue 原型对象操作
	(2) 写法
	    // 生命钩子 
	    beforeCreate() { vue.prototype.x = this }  // 这边这个 x 最好取名为 $bus
	(3) 传递 
	    // 利用自定义事件传递
	       // 数据发出组件
	       this.x.$emit('方法名', data => { log(data) })
	       // 数据接收组件
	       this.x.$on('方法名', 数据);
	(4) 使用完后记得及时销毁
	    // 生命钩子 
	    beforeDestroy() { this.x.$off('方法名') }
	(5) 可以利用一个组件 pubsub-js
	    $on ==> this.pubId = pubsub.subscribe('hello', (msgName, data) => {});
	    $emit ==> pubsub.publish('hello', 666)
	    $off ==> pubsub.unsubscribe(this.pubId);

13. 过渡动画(Vue2)
	(1) transition标签
	    <transition [name="xxx"] [appear]>
	      <h1 v-show="flag">World</h1>
	    </transition>
	    
	    <transition-group [name="xxx"] [appear]>
	      <h1 v-show="flag">World</h1>
	    </transition>
	(2)  css
	    .{ [name] || v}-enter-active {}  // 进入 所有过程
	    .{ [name] || v}-leave-active {}  // 离开 所有过程
	    
	    .{ [name] || v}-enter {}  // 进入
	    .{ [name] || v}-enter-to {}  // 进入 过渡的终点
	    
	    .{ [name] || v}-leave {}  // 离开
	    .{ [name] || v}-leave-to {}  // 离开 过渡的终点
	    
	(3) 小结
	    需要使用过渡的东西, 写在 transition 标签中; 
	    类名必须要规范, 然后是配合 v-show属性 使用的;
	    appear 标签 是为了让 动画一开始就生效;
	    name 属性用于 css类名标识;
	    transition-group 下的元素, 一般是使用 v-for 对每个元素进行 key值绑定(必须); 若 key 值手写的话, 也行, 但一般是用在 互斥显示 的元素上的

14. vuex
	(1) dispatch: 一般在业务组件中使用, 用于事件的派发.
	    this.$store.dispatch('action_name', pass_value);
	    直接经过 store 的 actions
	    
	(2) state: 类似于 data 中的变量维护, 没什么特别的
	    若 不使用 getter , 那么在 组件中的 数据 
	    1) 插值语法: {{ $store.state[state_name] }}
	    2) script: this.$store.state[state_name]
	    
	(3) actions: 在 vuex 中使用, 响应组件中的动作.
	    actions 中 的函数 有两个形参(context, value)
	    其中 context 是 简化版的 store(Vuex.store)
	    value 就是 通过 dispatch 传递过来的 参数
	    
	    最终步是将 数据 commit, context.commit('mutations_name', pass_value);
	    
	(4) mutations: 在 vuex 中使用, 数据的处理 与 传递到 mutations赋值.
	    写法类似于 actions.
	    有两个形参, (state, value)
	    state 为 该 store 中的整个 state
	    value 为 actions 传递过来的值
	
	(5) getter: 用于 vuex 中 state值 的 加工 与 获取, 并且 拥有 值动态变化的 情况
	    他有一个形参 (state), 然后 getters 的 return 的值就是从这个 state 中拿到的 
	    1) 若用 插值语法, 那么 {{ $store.getters[presever_data] }}, 类似于  组件中的 computed
	    2) 

	(6) mapxxx: 用于组件 script 中 获取 vuex 的值
	
	    其中: 都有对象写法, 主要可以用于区别 是 vuex 还是 组件内的函数
	    对象式: ...xxx({increase: 'add'});
	    
	    1) mapState: 
	       在 computed 内写, 直接获取 state 中对应变量的值
	       语法: ...mapState(['state_name', ....]);
	    2) mapGetters: 
	    	   在 computed 内写, 动态获取 getters 中返回的值
	       语法: ...mapGetters(['getters_name', ....]);
	    3) mapMutations: 
	       在 methods 内写, 取代 func, 需要注意的是, 传参写在 html 里(eg: @click="ADD(n)")
	       ...mapMutations(['mutation_name', ....]);
	    4) mapActions:
	       在 methods 内写, 取代 dispatch 方法, 同样的, 也是调用的 时候注意传参 html
	       
	(7) 模块化写法
	    /* *** vuex组件 *** */
	    const a = { namespaced: true, ....其他照旧 }
	    
	    export ...vuex({ modules: { tempAbout: a } })
	    
	    /* *** 组件使用 *** */
	    ...mapState("export_vuex_name(eg: 'tempAbout', 类似于一个命名空间)", ['照旧'...]);
	    ||
	    ...mapState("export_vuex_name(eg: 'tempAbout', 类似于一个命名空间)", {a: '照旧'...});


15. router
	(1) router-link, router-view
	    HTML 标签, 默认为 a 标签
	    to: 跳转路由
	        1) query
	           字符串写法: 类似 ?id=xxx&title=xxx
	           对象形式: :to={ path: 'xxx', query: {xxx: xx} }
	        2) 多级路由(一级也可以, 只是相对繁琐, 没必要)
	           需要先在 router 内配置每一个路由的 name, 然后就可以把 path 改为 name
	           :to="{
	               name: 'About',
	               ...
	           }"
	        3) params
	           对象形式: :to={ name: 'xxx', query: {xxx: xx} }  // 只能使用 name, 用 path 会报错
	           在 router 中的配置
	           {
	              ...
	              path: 'detail/:id/:title'
	              ...
	           }
	    active-class: 激活时的样式
	    
	    
	(2) index.js
	    routes: 路由管理
	        {
	            name: ''  // 命名路由 与 router-link 的 to 属性 配合
	            path: '',  // 路由跳转的路径
	            component: '',  // 组件
	            
	            children: [  // 子路由
	                {
	                    path: 'xxx',  // 注意, 这里不加 /
	                    component: '',
	                    props: true,  // 这里的意思是 params 参数在页面中都可以以 props 来传递(可以 用对象形式, 但是就变成把数据写死了)
	                }
	            ]
	        }
	    props: 
	        1) Obj: (不推荐, 因为这样就是把值给写死了)
	           props: {a: 1, b: 2},
	        2) boolean: (稍不推荐, 因为这是把 所有的 params 给传递过去; 并且, 不会将 query 的值传递过去)
	           props: true
	        3) func
	           props({query}) {
	              return {id: query.id, title: query.title}
	           }
	           props({params}) {
	              return {id: params.id, title: params.title}
	           }
	           
	           // 解构赋值的 连续写法(稍不建议)
	           props({params: {id, title}}) {
	              return {id, title}
	           }
	           
	        
	(3) script
	    props: ['']  // 在 route 中配置了 props 后即可 对 params传参 进行配置

	(4) 编程式路由导航(类似于 网页内嵌的 前进和后退 按钮)
	    前进: this.$router.back();  
	    后退: this.$router.forward();
	    自由前进与后退: this.$router.go();  // 正数: 前进 n 步, 负数: 后退 n 步
	(5) 缓存路由
	    html: <keep-alive include="组件名(即 .vue 文件)">
	    一般用在 表单 这一类路由上, 在切换时, 填写过的内容不会被清空
	(6) 前置路由守卫
	    一般用于做鉴权
	    router.beforeEach(to, from, next) {
	       to: // 去哪里, to.path
	       form: // 从哪来
	       
	       next(); // 放行
	    }
	(7) 后置路由守卫
	    router.afterEach(to, from) {
	       to: // 去哪里, to.path
	       form: // 从哪来
	       
	       // 一般做这个
	       document.title = meta.title
	       
	    }
	(8) 独享路由守卫(!!!只有前置)
	    在 route 配置项中写
	    beforeEnter(to, from, next) {
	        里面和全局前置路由守卫一样
	    }	
	(9) 独享路由守卫(不怎么用)
	    在组件内写, 通过路由规则 进入||离开 该组件时被调用(即普通组件不被触发, 路由组件则会触发)
	    beforeRouteEnter(to, from, next) {}
	    beforeRouteLeave(to, from, next) {}
	(10) meta
	    router 中的一个属性, 用于保存 程序员自己要保存的信息
	    
	    比如: {isAuth: ture}
	    to.meta.isAuth === true
	    
	    比如: {title: 'name'}
	    document.title = meta.title
	(11) mode
	     hash: 在地址栏有一个 # , # 之后不作为网络请求发送给服务器
	           localhost/#/xxxx    
	     history: 平常看到的就是
	     
	     1) 一般用 hash 模式, 用于项目部署 => npm run build
	     因为 是单页面 应用, 所以 路由地址 不是以 hash 形式, 那么网络地址是找不到这些东西的
	     2) 但是, 毕竟 history 会好看一点, 所以需要和 后端 配合, 就能使用 history 模式 (node, 用 connect-history 即可, 但要在资源托管之前 use)


	    hash: 
	        1) 兼容性较好
	        2) 带 # , 不美观
	        3) 分享时, 可能会把地址标记为不合法
	    history: 
	        1) 兼容性略差
	        2) 地址干净
	        3) 需要后端支持











